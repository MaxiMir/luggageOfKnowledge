<?
############### ООП ###############

/*
Описание объектов рассматриваемой области и связей между ними называется онтологией предметной области. Эту онтологию хорошо знают эксперты соответствующей области (в бухгалтерии — бухгалтер, в обучении — преподаватель), но в отличие от программистов, они часто представляют ее на интуитивном уровне, неформально. На практике, программисты (или бизнес-аналитики и менеджеры) общаются с заказчиками, которые могут сами выступать в роли экспертов и строят вместе с ними формальную онтологию (этот процесс происходит постоянно в процессе развития проекта и не выделяется в отдельный этап проектирования). То есть выделяют конкретные термины, договариваются о том что они означают и как связаны друг с другом. Затем, используя ER-модель (https://ru.wikipedia.org/wiki/ER-модель), программист формирует необходимую модель данных. ER-модель — используется при высокоуровневом (концептуальном) проектировании баз данных. На этом этапе уже проявляются зачатки архитектуры будущего приложения.

Кстати, далеко не всегда можно однозначно сказать какая связь существует между двумя сущностями. Иногда программисты думают наперед и сразу формируют более сложные связи, например m2m, а не o2m, что сказывается на сложности кода. Чем сложнее связь, тем больше кода и выше стоимость ее создания и поддержки. Сложность связей можно описать так (правее — сложнее): o2o, o2m, m2m. Иногда программисты ошибаются при выборе той или иной связи, что обычно говорит о недостаточно хорошем понимании предметной области. Приведу интересный пример. Предположим, что в системе нужно реализовать пользователя и заграничный паспорт. Интуитивно кажется, что между этими понятиями связь один к одному, ведь один пользователь может иметь один заграничный паспорт. Так? Не совсем, паспорт может поменяться, если он был утерян или закончился срок действия. К тому же, в некоторых странах (в России недавно приняли такой закон) разрешено владение одновременно несколькими заграничными паспортами.

С другой стороны, реальный мир всегда сложнее и полнее чем любая модель и задача программиста состоит не в том, чтобы создать универсальную и всеобъемлющую модель некоторой области, а в том, чтобы понять потребности конкретного бизнеса, выделить для них только значимые части рассматриваемой предметной области и перенести ее в код.

В зависимости от языка меняется способ представления сущностей в коде. В некоторых определяются типы (используя АТД, интерфейсы или классы), в других структуры. Третьи вообще не предоставляют никаких вариантов, кроме словарей (ассоциативных массивов). То самое понятие ООП имеет непосредственное отношение к рассматриваемой теме. Со следующего урока мы начнем изучать различные предметные области и строить подходящие модели данных, попутно изучая новые возможности PHP.

Проблемно-ориентированное проектирование - https://ru.wikipedia.org/wiki/Проблемно-ориентированное_проектирование
*/