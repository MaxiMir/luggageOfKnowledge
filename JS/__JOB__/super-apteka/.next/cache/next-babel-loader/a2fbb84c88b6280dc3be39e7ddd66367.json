{"ast":null,"code":"\"use strict\";\n/**\n * This is a modified version of the First Input Delay polyfill\n * https://github.com/GoogleChromeLabs/first-input-delay\n *\n * It checks for a first input before and after hydration\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction fidPolyfill(addEventListener, removeEventListener) {\n  var firstInputEvent;\n  var firstInputDelay;\n  var firstInputTimeStamp;\n  var callbacks = [];\n  var listenerOpts = {\n    passive: true,\n    capture: true\n  };\n  var startTimeStamp = +new Date();\n  var pointerup = 'pointerup';\n  var pointercancel = 'pointercancel';\n\n  function onInputDelay(callback) {\n    callbacks.push(callback);\n    reportInputDelayIfRecordedAndValid();\n  }\n\n  function recordInputDelay(delay, evt) {\n    firstInputEvent = evt;\n    firstInputDelay = delay;\n    firstInputTimeStamp = +new Date();\n    reportInputDelayIfRecordedAndValid();\n  }\n\n  function reportInputDelayIfRecordedAndValid() {\n    var hydrationMeasures = performance.getEntriesByName('Next.js-hydration', 'measure');\n    var firstInputStart = firstInputTimeStamp - startTimeStamp;\n\n    if (firstInputDelay >= 0 && firstInputDelay < firstInputStart && (hydrationMeasures.length === 0 || hydrationMeasures[0].startTime < firstInputStart)) {\n      callbacks.forEach(function (callback) {\n        callback(firstInputDelay, firstInputEvent);\n      }); // If the app is already hydrated, that means the first \"post-hydration\" input\n      // has been measured and listeners can be removed\n\n      if (hydrationMeasures.length > 0) {\n        eachEventType(removeEventListener);\n        callbacks = [];\n      }\n    }\n  }\n\n  function onPointerDown(delay, evt) {\n    function onPointerUp() {\n      recordInputDelay(delay, evt);\n    }\n\n    function onPointerCancel() {\n      removePointerEventListeners();\n    }\n\n    function removePointerEventListeners() {\n      removeEventListener(pointerup, onPointerUp, listenerOpts);\n      removeEventListener(pointercancel, onPointerCancel, listenerOpts);\n    }\n\n    addEventListener(pointerup, onPointerUp, listenerOpts);\n    addEventListener(pointercancel, onPointerCancel, listenerOpts);\n  }\n\n  function onInput(evt) {\n    if (evt.cancelable) {\n      var isEpochTime = evt.timeStamp > 1e12;\n      var now = isEpochTime ? +new Date() : performance.now();\n      var delay = now - evt.timeStamp;\n\n      if (evt.type === 'pointerdown') {\n        onPointerDown(delay, evt);\n      } else {\n        recordInputDelay(delay, evt);\n      }\n    }\n  }\n\n  function eachEventType(callback) {\n    var eventTypes = ['click', 'mousedown', 'keydown', 'touchstart', 'pointerdown'];\n    eventTypes.forEach(function (eventType) {\n      callback(eventType, onInput, listenerOpts);\n    });\n  }\n\n  eachEventType(addEventListener);\n  var context = self;\n  context['hydrationMetrics'] = context['hydrationMetrics'] || {};\n  context['hydrationMetrics']['onInputDelay'] = onInputDelay;\n}\n\nexports.default = fidPolyfill;","map":{"version":3,"sources":["/Users/maksimmincenko/PhpstormProjects/slim.xppx/r/KNOWLEDGE/JS/__JOB__/super-apteka/node_modules/next/dist/next-server/lib/fid.js"],"names":["Object","defineProperty","exports","value","fidPolyfill","addEventListener","removeEventListener","firstInputEvent","firstInputDelay","firstInputTimeStamp","callbacks","listenerOpts","passive","capture","startTimeStamp","Date","pointerup","pointercancel","onInputDelay","callback","push","reportInputDelayIfRecordedAndValid","recordInputDelay","delay","evt","hydrationMeasures","performance","getEntriesByName","firstInputStart","length","startTime","forEach","eachEventType","onPointerDown","onPointerUp","onPointerCancel","removePointerEventListeners","onInput","cancelable","isEpochTime","timeStamp","now","type","eventTypes","eventType","context","self","default"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * This is a modified version of the First Input Delay polyfill\n * https://github.com/GoogleChromeLabs/first-input-delay\n *\n * It checks for a first input before and after hydration\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction fidPolyfill(addEventListener, removeEventListener) {\n    var firstInputEvent;\n    var firstInputDelay;\n    var firstInputTimeStamp;\n    var callbacks = [];\n    var listenerOpts = { passive: true, capture: true };\n    var startTimeStamp = +new Date();\n    var pointerup = 'pointerup';\n    var pointercancel = 'pointercancel';\n    function onInputDelay(callback) {\n        callbacks.push(callback);\n        reportInputDelayIfRecordedAndValid();\n    }\n    function recordInputDelay(delay, evt) {\n        firstInputEvent = evt;\n        firstInputDelay = delay;\n        firstInputTimeStamp = +new Date();\n        reportInputDelayIfRecordedAndValid();\n    }\n    function reportInputDelayIfRecordedAndValid() {\n        var hydrationMeasures = performance.getEntriesByName('Next.js-hydration', 'measure');\n        var firstInputStart = firstInputTimeStamp - startTimeStamp;\n        if (firstInputDelay >= 0 &&\n            firstInputDelay < firstInputStart &&\n            (hydrationMeasures.length === 0 ||\n                hydrationMeasures[0].startTime < firstInputStart)) {\n            callbacks.forEach(function (callback) {\n                callback(firstInputDelay, firstInputEvent);\n            });\n            // If the app is already hydrated, that means the first \"post-hydration\" input\n            // has been measured and listeners can be removed\n            if (hydrationMeasures.length > 0) {\n                eachEventType(removeEventListener);\n                callbacks = [];\n            }\n        }\n    }\n    function onPointerDown(delay, evt) {\n        function onPointerUp() {\n            recordInputDelay(delay, evt);\n        }\n        function onPointerCancel() {\n            removePointerEventListeners();\n        }\n        function removePointerEventListeners() {\n            removeEventListener(pointerup, onPointerUp, listenerOpts);\n            removeEventListener(pointercancel, onPointerCancel, listenerOpts);\n        }\n        addEventListener(pointerup, onPointerUp, listenerOpts);\n        addEventListener(pointercancel, onPointerCancel, listenerOpts);\n    }\n    function onInput(evt) {\n        if (evt.cancelable) {\n            var isEpochTime = evt.timeStamp > 1e12;\n            var now = isEpochTime ? +new Date() : performance.now();\n            var delay = now - evt.timeStamp;\n            if (evt.type === 'pointerdown') {\n                onPointerDown(delay, evt);\n            }\n            else {\n                recordInputDelay(delay, evt);\n            }\n        }\n    }\n    function eachEventType(callback) {\n        var eventTypes = [\n            'click',\n            'mousedown',\n            'keydown',\n            'touchstart',\n            'pointerdown',\n        ];\n        eventTypes.forEach(function (eventType) {\n            callback(eventType, onInput, listenerOpts);\n        });\n    }\n    eachEventType(addEventListener);\n    var context = self;\n    context['hydrationMetrics'] = context['hydrationMetrics'] || {};\n    context['hydrationMetrics']['onInputDelay'] = onInputDelay;\n}\nexports.default = fidPolyfill;\n"]},"metadata":{},"sourceType":"script"}