@mixin input ($width: 300px, $bg: #fff) { // дефолтные значения
    display: block;
    width: $width;
    background: $background;

    @if $width < 300px { // условия
        text-align: center;
    } @else if $width == 300px  {
        text-align: left;
    } @else {
        text-align: right;
    }
}

.input {
    @include input (100px, #2ecc71); // + задаем свои значения свойств
}

.input-short {
    @include input($bg: #ff11cc); // + меняем определенное значение
}

.input-long {
    @extend .input;
    width: 100px; // переопределяем значение
}

%clearfix { // примесь без параметров
    &:after {
        content: '';
        display: block;
        clear: both;
    }
}

.wrap {
    @extend %clearfix; // наследование
}


@each $social in (fb, vk, tw) { // цикл
    .social_#{$social} { // #{} - интерполяция
        background: url('/img/#{$social}.png') center center no-repeat; 

        &:hover {
            background: url('/img/#{$social}-hover.png') center center no-repeat; 
        }
    }
}




// FILE main.scss:

// colors:
$orange: #e45028;

// breakpoints:
$tablets: 768px;
$phones: 480px;

// normalize
@import "_misc/normalize.scss";

// media:
@import "_misc/media";

// setups:
@import "_misc/mixins";
@import "_misc/fonts";
@import "_misc/layout";

// blocks:
@import "blocks/btn.scss";
@import "blocks/fixed-menu.scss";
@import "blocks/best.scss";


// FILE media:
@function rem($px) {
    @return $px / 16px + 0 rem;
}

@mixin tablets() {
    @media screen and (max-width: $tablets) {

    }
}

@mixin phones() {
    @media screen and (max-width: $phones) {
        
    }
}


// FILE: layout.scss:
html {
    font-size: 16px;

    @include tablets() {
        font-size: 14px;
    }

    @include tablets() {
        font-size: 13px;
    }    
}



// Пример:
@mixin test() {
    .class {
        @content;
    }
}

.test-class {
    @include test { // ! исключение - медиазапросы оборачивают снаружи
        color: red; 
    }
}

// =>
.test-class {
    .class {
        color: red; 
    }
}


// Пример #2:
// Исходим из базового размера шрифта указанного в "px"
$font-size: 16px;

// Пересчет пикселей в rem на основании базового размера шрифта:
@function pixelsConvert($list, $unit) {
    $units: (rem, em);
    @if (index($units, $unit) == null) {
        @error "Преобразование в \"#{unit}\" недоступно, доступны: #{$units}";
    }

    @if (unit($font-size) != "px") {
        @error "Значение глобальной переменной $font-size должно быть задано в пикселях";
    }

    $result: ();
    @each $value in $list {
        @if (type-of($value) == number and $value != 0) {
            $value: if(unit($value) == "", $value * 1px, $value);
            @if (unit($value) == "px") {
                $value: ($value / $font-size) + $unit;
            }
        }

        $result: append($result, $value);
    }

    @return $result;
}

@function rem($list) {
    @return pixelsConvert($list, rem);
}

@function em($list) {
    @return pixelsConvert($list, em);
}

.test {
    width: rem(16);
    height: rem(128px !important);
    margin: rem(16px 32 auto 10%);
    padding: em(64px 50% 0 inherit);
    box-shadow: rem(0 20px 20px -20px rgba(0, 0, 0, 0.4));
}

// =>
.test {
    width: 1rem;
    height: 8rem !important;
    margin: 1rem 2rem auto 10%;
    padding: 4rem 50% 0 inherit;
    box-shadow: 0 1.25rem 1.25rem -1.25rem rgba(0, 0, 0, 0.4);
}

